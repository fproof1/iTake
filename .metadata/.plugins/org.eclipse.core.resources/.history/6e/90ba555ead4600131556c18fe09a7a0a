package com.example.itake;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class AlarmDatabase extends SQLiteOpenHelper
{
    class Row extends Object 
    {
        public long _Id;
        public String code;
        public String name;
        public String gender;
    }
    
    private static final String DATABASE_NAME = "ALARMDB";

    private static final String DATABASE_TABLE = "ALARMDATA";

    private static final int DATABASE_VERSION = 1;

    private static final String DATABASE_CREATE = "create table "
    	+ DATABASE_NAME + "("
    	+ "_id integer primary key autoincrement, "
        + "code text not null," 
    	+ "name text not null" + ");";

    private SQLiteDatabase db;

    public AlarmDatabase(Context ctx) 
    {
    	super(ctx, DATABASE_NAME, null, DATABASE_VERSION);
    }
    
    @Override
	public void onCreate(SQLiteDatabase db) 
	{
		// TODO Auto-generated method stub
		db.execSQL(DATABASE_CREATE);
		
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// TODO Auto-generated method stub
		
	}

    public void close() 
    {
        db.close();
    }

    public void createRow(String code, String name) 
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put("code", code);
        initialValues.put("name", name);
        db.insert(DATABASE_TABLE, null, initialValues);
    }

    public void deleteRow(long rowId) 
    {
        db.delete(DATABASE_TABLE, "_id=" + rowId, null);
    }

    public List<Row> fetchAllRows() 
    {
        ArrayList<Row> ret = new ArrayList<Row>();
        try 
        {
            Cursor c = db.query(DATABASE_TABLE, new String[] {"_id", "code", "name"}, null, null, null, null, null);
            int numRows = c.getCount();
            c.moveToFirst();
            for (int i = 0; i < numRows; ++i) 
            {
                Row row = new Row();
                row._Id = c.getLong(0);
                row.code = c.getString(1);
                row.name = c.getString(2);
                ret.add(row);
                c.moveToNext();
            }
        } 
        catch (SQLException e) 
        {
            Log.e("Exception on query", e.toString());
        }
        return ret;
    }

    public Row fetchRow(long rowId) 
    {
        Row row = new Row();
        Cursor c = db.query(true, DATABASE_TABLE, new String[] {"_id", "code", "name"},
        		"_id=" + rowId, null, null, null, null, null);
        if (c.getCount() > 0) 
        {
            c.isFirst();
            row._Id = c.getLong(0);
            row.code = c.getString(1);
            row.name = c.getString(2);
            return row;
        } 
        else 
        {
            row._Id = -1;
            row.code = row.name= null;
        }
        return row;
    }

    public void updateRow(long rowId, String code, String name) 
    {
        ContentValues args = new ContentValues();
        args.put("code", code);
        args.put("name", name);
        db.update(DATABASE_TABLE, args, "_id=" + rowId, null);
    }
   
    public Cursor GetAllRows() 
    {
        try 
        {
            return db.query(DATABASE_TABLE, new String[] {"_id", "code", "name"}, null, null, null, null, null);
        } 
        catch (SQLException e) 
        {
            Log.e("Exception on query", e.toString());
            return null;
        }
    }
}